"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net_1 = require("net");
const reporter_1 = require("./reporter");
class GraphiteReporter extends reporter_1.Reporter {
    constructor(host = process.env.GRAPHITE_HOST || 'localhost', port = process.env.GRAPHITE_PORT || '2003', prefix = 'app') {
        super();
        this.host = host;
        this.port = port;
        this.prefix = prefix;
        this.socket = new net_1.Socket();
        this.reconnecting = false;
    }
    start() {
        this.socket.on('error', error => {
            if (!this.reconnecting) {
                this.reconnecting = true;
                this.emit('log', 'warn', `Lost connection to ${this.host}. Reconnect in 10 seconds: ${error}`);
                this.stop();
                setTimeout(() => {
                    this.reconnecting = false;
                    this.start();
                }, 10000);
            }
        });
        this.emit('log', 'verbose', `Connecting to graphite @ ${this.host}:${this.port}.`);
        this.socket.connect(parseInt(this.port), this.host, () => {
            this.emit('log', 'verbose', `Successfully connected to graphite @ ${this.host}:${this.port}.`);
            this.interval = setInterval(() => {
                this.report();
            }, this.reportInterval);
        });
    }
    report() {
        if (this.reconnecting)
            return;
        const timestamp = Date.now() / 1000;
        const metrics = this.getMetrics();
        if (metrics.gauges.length !== 0) {
            metrics.gauges.forEach(gauge => {
                this.reportGauge(gauge, timestamp);
            });
        }
        if (metrics.meters.length !== 0) {
            metrics.meters.forEach(meter => {
                this.reportMeter(meter, timestamp);
            });
        }
        if (metrics.timers.length !== 0) {
            metrics.timers.forEach(timer => {
                this.reportTimer(timer, timestamp);
            });
        }
        if (metrics.counters.length !== 0) {
            metrics.counters.forEach(counter => {
                this.reportCounter(counter, timestamp);
            });
        }
        if (metrics.histograms.length !== 0) {
            metrics.histograms.forEach(histogram => {
                this.reportHistogram(histogram, timestamp);
            });
        }
    }
    send(name, value, timestamp) {
        if (this.reconnecting)
            return;
        this.socket.write(`${this.prefix}.${name} ${value} ${timestamp}\n`);
    }
    reportGauge(gauge, timestamp) {
        if (gauge) {
            this.send(gauge.name, gauge.toJSON(), timestamp);
        }
    }
    reportCounter(counter, timestamp) {
        if (counter) {
            this.send(counter.name, counter.toJSON(), timestamp);
        }
    }
    reportMeter(meter, timestamp) {
        if (meter) {
            this.reportMeterMetrics(meter.name, meter.toJSON(), timestamp);
        }
    }
    reportHistogram(histogram, timestamp) {
        if (histogram) {
            this.send(`${histogram.name}.count`, histogram.count, timestamp);
            this.reportHistogramMetrics(histogram.name, histogram.toJSON(), timestamp);
        }
    }
    reportTimer(timer, timestamp) {
        if (timer) {
            const timerObject = timer.toJSON();
            const meter = timerObject.meter;
            const histogram = timerObject.histogram;
            this.reportMeterMetrics(timer.name, meter, timestamp);
            this.reportHistogramMetrics(timer.name, histogram, timestamp);
        }
    }
    reportMeterMetrics(name, meterObject, timestamp) {
        this.send(`${name}.count`, meterObject.count, timestamp);
        this.send(`${name}.mean_rate`, meterObject.mean, timestamp);
        this.send(`${name}.m1_rate`, meterObject['1MinuteRate'], timestamp);
        this.send(`${name}.m5_rate`, meterObject['5MinuteRate'], timestamp);
        this.send(`${name}.m15_rate`, meterObject['15MinuteRate'], timestamp);
    }
    reportHistogramMetrics(name, histogramObject, timestamp) {
        Object.keys(histogramObject).forEach(key => {
            this.send(`${name}.${key}`, histogramObject[key], timestamp);
        });
    }
}
exports.GraphiteReporter = GraphiteReporter;
//# sourceMappingURL=data:application/json;base64,